{
  "title": "Git & GitHub Learning",
  "sections": [
    {
      "id": 1,
      "title": "Introduction to Git & GitHub",
      "content": "Git is a distributed version control system that helps track changes in source code. GitHub is a cloud-based platform that hosts Git repositories and provides collaboration features."
    },
    {
      "id": 2,
      "title": "Installation & Setup",
      "content": "To install Git, download it from the official website (https://git-scm.com/) and follow the installation guide. After installation, configure Git with your username and email using the commands:\n\n git config --global user.name 'Your Name'\n git config --global user.email 'youremail@example.com'"
    },
    {
      "id": 3,
      "title": "Basic Commands",
      "content": "Essential Git commands include:\n - git init: Initialize a new repository.\n - git clone <repo-url>: Clone an existing repository.\n - git add <file>: Stage changes for commit.\n - git commit -m 'message': Save changes to history.\n - git push: Upload local commits to a remote repository."
    },
    {
      "id": 4,
      "title": "Branching & Merging",
      "content": "Branches in Git allow multiple people to work on a project without interfering with each other's code. Common commands:\n - git branch <branch-name>: Create a new branch.\n - git checkout <branch-name>: Switch to a branch.\n - git merge <branch-name>: Merge a branch into the current branch."
    },
    {
      "id": 5,
      "title": "Working with Remote Repositories",
      "content": "Git allows you to work with remote repositories stored on platforms like GitHub. Important commands:\n - git remote add origin <repo-url>: Link local repo to a remote.\n - git pull origin main: Fetch and merge changes from the remote repository.\n - git push origin main: Push local changes to the remote repository."
    },
    {
      "id": 6,
      "title": "GitHub Workflow",
      "content": "A common GitHub workflow includes:\n 1. Forking a repository.\n 2. Cloning it locally.\n 3. Creating a new branch for changes.\n 4. Making changes and committing them.\n 5. Pushing changes and creating a pull request."
    },
    {
      "id": 7,
      "title": "Common Issues & Troubleshooting",
      "content": "Common Git issues:\n - Merge conflicts: Resolve by editing conflicting files and committing resolved changes.\n - Detached HEAD state: Use 'git checkout main' to return to a branch.\n - Lost commits: Use 'git reflog' to view recent actions and recover lost commits."
    },
    {
      "id": 8,
      "title": "Best Practices",
      "content": "To work efficiently with Git:\n - Commit frequently with meaningful messages.\n - Use branches for feature development.\n - Pull changes before pushing to avoid conflicts.\n - Use .gitignore to exclude unnecessary files from the repository."
    },
    {
      "id": 9,
      "title": "Additional Resources",
      "content": "Learn more about Git & GitHub from these resources:\n - Pro Git book (https://git-scm.com/book)\n - GitHub Docs (https://docs.github.com/)\n - Git cheat sheet (https://education.github.com/git-cheat-sheet-education.pdf)"
    }
  ]
}
